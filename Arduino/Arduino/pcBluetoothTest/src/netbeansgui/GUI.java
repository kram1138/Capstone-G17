package netbeansgui;

import CSVParsing.CSVParsing;
import GenericCode.Generic;
import MatrixGenerator.MatrixGenerator;
import Pathfinding.Pathfinding;

import java.awt.Color;
import java.util.Observable;
import java.util.Observer;
import java.util.ArrayList;
import java.util.Arrays;

/**
 *
 * @author Lucas Wiebe-Dembowski
 */
public class GUI extends javax.swing.JFrame implements userinterface.UserInterface, Observer{
    private class GUIObservable extends Observable{
    //Can't make GUI class extend Observable, so I store one instead.
        public void notify(String msg) {
            setChanged();
            notifyObservers(msg);
        }
    }

    private final GUIObservable myObservable = new GUIObservable();
    private String path;
    private String mapFileName;
    private ArrayList<ArrayList<Float>> A;
    
    private int numNodes; //number of nodes in path
    private boolean waitingForResponse; //true if arduino is supposed to send message back for confirmation, false otherwise.

    public GUI() {
        initComponents();
        path = "";
        mapFileName = "";
        waitingForResponse = false;
    }
    
    @Override
    public void update(Observable obj, Object arg){ //Observer update() method.
    //NOT TO BE CONFUSED WITH MY UPDATE(STRING) METHOD, DEFINED AT THE BOTTOM OF THIS FILE
        if(arg instanceof String){
            String myText = (String)arg;
            if(myText.contains("Arduino") && myText.substring(0, 7).equals("Arduino")){
                //This message was sent from the arduino, not internally from this program.
                String str = myText.substring(7, myText.length()); // -2 to ignore the \r\n at the end // CHANGED THIS (no need for -2)
                String pathString = Integer.toString(numNodes) + " " + path;
//                System.out.println("str is '" + str + "'");
//                System.out.println("path is '" + path + "'");
                if(waitingForResponse && str.trim().equals(pathString.trim())){
                    waitingForResponse = false;
                    update("Successfully sent path to Robot and received confirmation.");
                    sendMsg("ACK AAAAAAAAAA");
                }else if(waitingForResponse && !str.trim().equals(pathString.trim())){
                    update("Sent path to Robot, but there was a transmission error. Re-sending.");
                    sendMsg("ACK OOOOOOOOOO");
                    sendMsg("path " + pathString); //the word "path" gets deleted before sending to robot.
                }
                updateArduinoMessages(str);
            }else{ //This message was sent internally from this program.
                update(myText);
            }
        }
    }
    
    private void sendMsg(String msg){
        myObservable.notify(msg);
    }
    
    public void addObserver(Observer o){
        myObservable.addObserver(o);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Open = new javax.swing.JButton();
        Close = new javax.swing.JButton();
        quit = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        portName = new javax.swing.JTextField();
        setPortNameButton = new javax.swing.JButton();
        stopCode = new javax.swing.JTextField();
        setStopCodeButton = new javax.swing.JButton();
        listPorts = new javax.swing.JButton();
        Stop = new javax.swing.JButton();
        Start = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        PathField = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        leftRoom = new javax.swing.JButton();
        rightRoom = new javax.swing.JButton();
        rightIntersection = new javax.swing.JButton();
        leftIntersection = new javax.swing.JButton();
        sendPath = new javax.swing.JButton();
        clearPath = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        showPath = new javax.swing.JButton();
        numberBox = new javax.swing.JTextField();
        NodeNumberSpinner = new javax.swing.JSpinner();
        nodeNumberButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        ArduinoMessages = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        Messages = new javax.swing.JTextArea();
        fileNameBox = new javax.swing.JTextField();
        setFileButton = new javax.swing.JButton();
        createPathButton = new javax.swing.JButton();
        clearMessages = new javax.swing.JButton();
        clearArduinoMessages = new javax.swing.JButton();
        clearAll = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Open.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        Open.setText("Open Port");
        Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenActionPerformed(evt);
            }
        });

        Close.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        Close.setText("Close Port");
        Close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseActionPerformed(evt);
            }
        });

        quit.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        quit.setText("Quit");
        quit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel4.setText("Messages");

        portName.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        portName.setText("COM6");
        portName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portNameActionPerformed(evt);
            }
        });

        setPortNameButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        setPortNameButton.setText("Set Port Name");
        setPortNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setPortNameButtonActionPerformed(evt);
            }
        });

        stopCode.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        stopCode.setText("0x17");
        stopCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopCodeActionPerformed(evt);
            }
        });

        setStopCodeButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        setStopCodeButton.setText("Set Stop Code");
        setStopCodeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setStopCodeButtonActionPerformed(evt);
            }
        });

        listPorts.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        listPorts.setText("List Available Serial Ports");
        listPorts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listPortsActionPerformed(evt);
            }
        });

        Stop.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        Stop.setText("Stop");
        Stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopActionPerformed(evt);
            }
        });

        Start.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        Start.setText("Start");
        Start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartActionPerformed(evt);
            }
        });

        PathField.setEditable(false);
        PathField.setColumns(20);
        PathField.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        PathField.setLineWrap(true);
        PathField.setRows(5);
        jScrollPane1.setViewportView(PathField);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel5.setText("Path");

        leftRoom.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        leftRoom.setText("Left Room ");
        leftRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftRoomActionPerformed(evt);
            }
        });

        rightRoom.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        rightRoom.setText("Right Room ");
        rightRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightRoomActionPerformed(evt);
            }
        });

        rightIntersection.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        rightIntersection.setText("Right Intersection");
        rightIntersection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightIntersectionActionPerformed(evt);
            }
        });

        leftIntersection.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        leftIntersection.setText("Left Intersection");
        leftIntersection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftIntersectionActionPerformed(evt);
            }
        });

        sendPath.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        sendPath.setText("Send Path");
        sendPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendPathActionPerformed(evt);
            }
        });

        clearPath.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        clearPath.setText("Clear Path");
        clearPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearPathActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel6.setText("Arduino Messages");

        showPath.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        showPath.setText("Show Path");
        showPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPathActionPerformed(evt);
            }
        });

        numberBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numberBoxActionPerformed(evt);
            }
        });

        NodeNumberSpinner.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        NodeNumberSpinner.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                NodeNumberSpinnerMouseWheelMoved(evt);
            }
        });

        nodeNumberButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        nodeNumberButton.setText("Node Number");
        nodeNumberButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nodeNumberButtonActionPerformed(evt);
            }
        });

        ArduinoMessages.setEditable(false);
        ArduinoMessages.setColumns(20);
        ArduinoMessages.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        ArduinoMessages.setLineWrap(true);
        ArduinoMessages.setRows(5);
        jScrollPane2.setViewportView(ArduinoMessages);

        Messages.setEditable(false);
        Messages.setColumns(20);
        Messages.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        Messages.setLineWrap(true);
        Messages.setRows(5);
        jScrollPane3.setViewportView(Messages);

        fileNameBox.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        fileNameBox.setText("matrix4.csv");
        fileNameBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileNameBoxActionPerformed(evt);
            }
        });

        setFileButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        setFileButton.setText("Load Map From File");
        setFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setFileButtonActionPerformed(evt);
            }
        });

        createPathButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        createPathButton.setText("Compute Optimal Path");
        createPathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createPathButtonActionPerformed(evt);
            }
        });

        clearMessages.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        clearMessages.setText("Clear Messages");
        clearMessages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearMessagesActionPerformed(evt);
            }
        });

        clearArduinoMessages.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        clearArduinoMessages.setText("Clear Arduino Messages");
        clearArduinoMessages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearArduinoMessagesActionPerformed(evt);
            }
        });

        clearAll.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        clearAll.setText("Clear All");
        clearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(Start)
                        .addGap(18, 18, 18)
                        .addComponent(Stop))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(portName)
                                    .addComponent(stopCode, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(setPortNameButton)
                                    .addComponent(setStopCodeButton)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Open)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Close))
                            .addComponent(listPorts)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(leftIntersection, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                                    .addComponent(rightRoom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(leftRoom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(nodeNumberButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(NodeNumberSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(showPath, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sendPath, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(rightIntersection, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(fileNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(createPathButton))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(setFileButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(clearAll, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(numberBox, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(jLabel4)
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addGap(86, 86, 86)
                        .addComponent(quit))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(312, 312, 312)
                .addComponent(clearPath, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(162, 162, 162)
                .addComponent(clearMessages)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(clearArduinoMessages)
                .addGap(134, 134, 134))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(listPorts)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Open)
                            .addComponent(Close))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(setPortNameButton)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(portName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(stopCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(setStopCodeButton))))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Start)
                            .addComponent(Stop))
                        .addGap(37, 37, 37)
                        .addComponent(leftRoom)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rightRoom)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(leftIntersection)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rightIntersection)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(NodeNumberSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nodeNumberButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sendPath)
                        .addGap(43, 43, 43)
                        .addComponent(showPath)
                        .addGap(23, 23, 23)
                        .addComponent(fileNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(setFileButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(createPathButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel5)
                                .addComponent(jLabel4)
                                .addComponent(jLabel6)
                                .addComponent(numberBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(quit, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 904, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(clearPath)
                        .addComponent(clearAll))
                    .addComponent(clearMessages)
                    .addComponent(clearArduinoMessages)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenActionPerformed
        sendMsg("open");
    }//GEN-LAST:event_OpenActionPerformed

    private void CloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseActionPerformed
        sendMsg("close");
    }//GEN-LAST:event_CloseActionPerformed

    private void quitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitActionPerformed
        sendMsg("q");
    }//GEN-LAST:event_quitActionPerformed

    private void setPortNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setPortNameButtonActionPerformed
        sendMsg("portName " + portName.getText());
    }//GEN-LAST:event_setPortNameButtonActionPerformed

    private void portNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_portNameActionPerformed

    private void stopCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stopCodeActionPerformed

    private void setStopCodeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setStopCodeButtonActionPerformed
        sendMsg("stopCode " + stopCode.getText());
    }//GEN-LAST:event_setStopCodeButtonActionPerformed

    private void listPortsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listPortsActionPerformed
        sendMsg("listPorts");
    }//GEN-LAST:event_listPortsActionPerformed

    private void StopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopActionPerformed
        sendMsg("stop");
    }//GEN-LAST:event_StopActionPerformed

    private void StartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartActionPerformed
        sendMsg("start");
    }//GEN-LAST:event_StartActionPerformed

    private void leftRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftRoomActionPerformed
        path += "lr_";
        PathField.append("left room ");
        char[] pathArray = path.toCharArray();
//        pathArray[0] = Integer.toString(numNodes);
    }//GEN-LAST:event_leftRoomActionPerformed

    private void rightRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightRoomActionPerformed
        path += "rr_";
        PathField.append("right room ");
    }//GEN-LAST:event_rightRoomActionPerformed

    private void rightIntersectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightIntersectionActionPerformed
        path += "ri_";
        PathField.append("right intersection ");
    }//GEN-LAST:event_rightIntersectionActionPerformed

    private void leftIntersectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftIntersectionActionPerformed
        path += "li_";
        PathField.append("left intersection ");
    }//GEN-LAST:event_leftIntersectionActionPerformed

    private void sendPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendPathActionPerformed
        numNodes = 0; //Count how many spaces there are. Number of nodes is one more than that.
        for(int i = 0; i < path.length() - 1; i++){ // -1 to avoid counting the space at the end.
            if(path.charAt(i) == ' '){
                numNodes++;
            }
        }
        if(numNodes > 0 || !path.isEmpty()) numNodes++;
        sendMsg("path " + Integer.toString(numNodes) + " " + path); //the word "path" gets deleted before sending to robot.
        waitingForResponse = true;
    }//GEN-LAST:event_sendPathActionPerformed

    private void clearPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearPathActionPerformed
        PathField.setText("");
        path = new String("");
        waitingForResponse = false;
    }//GEN-LAST:event_clearPathActionPerformed

    private void showPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPathActionPerformed
        update(path);
    }//GEN-LAST:event_showPathActionPerformed

    private void numberBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numberBoxActionPerformed
        path += (numberBox.getText() + " ");
        PathField.append(numberBox.getText() + "\n");
    }//GEN-LAST:event_numberBoxActionPerformed

    private void NodeNumberSpinnerMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_NodeNumberSpinnerMouseWheelMoved
        int x = (int)NodeNumberSpinner.getValue() - evt.getWheelRotation();
        if(x >= 0) NodeNumberSpinner.setValue(x); //negative node number makes no sense
    }//GEN-LAST:event_NodeNumberSpinnerMouseWheelMoved

    private void nodeNumberButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nodeNumberButtonActionPerformed
        path += (Integer.toString((int)NodeNumberSpinner.getValue()) + " ");
        PathField.append(Integer.toString((int)NodeNumberSpinner.getValue()) + "\n");
    }//GEN-LAST:event_nodeNumberButtonActionPerformed

    private void fileNameBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileNameBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileNameBoxActionPerformed

    private void setFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setFileButtonActionPerformed
        mapFileName = fileNameBox.getText();
        update(String.format("Loading building map from file: %s ...", mapFileName));
        A = CSVParsing.matrixListFromCSV(mapFileName);
        if(A.size() == 0){
            update("Map unable to load. Make sure the file exists in the project root directory.");
        }else{
            update("Map successfully loaded.");
        }
    }//GEN-LAST:event_setFileButtonActionPerformed

    private void createPathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createPathButtonActionPerformed
	if(A == null || A.size() == 0){
            update("Please load a map from a file first.");
        }else{
            boolean VERBOSE = false;

            ArrayList<ArrayList<Float>> D = MatrixGenerator.allPairsShortestPaths(A, VERBOSE);

            int nEL = 2000;
            int nCL = 2000;
            double initialTemperature = 2.0;
            double finalTemperature = 0.001;
            int coolingSchedule = Pathfinding.EXPONENTIAL;

            update(String.format("\nRunning Simulated Annealing \non %d nodes with \nnEL = %d, \nnCL = %d, \nTi = %f and \nTf = %f \nusing %s cooling schedule:\n", 
                A.size(), nEL, nCL, initialTemperature, finalTemperature, Pathfinding.schedules[coolingSchedule]));

            int start = 0; //node that the robot starts at
            int[] soln;
            float cost;
            ArrayList<ArrayList<Float>> costs_and_times = new ArrayList<ArrayList<Float>>();
            long startTime, stop, runtime = 0;
            int i = 0;
            // for(int j = 0; j < 100; j++){
                    startTime = System.nanoTime();
                    int numIterations = 6;
                    soln = Pathfinding.optimizeSA(D, start, nEL, nCL, initialTemperature, finalTemperature, coolingSchedule, numIterations, VERBOSE);
                    update("solution is " + Arrays.toString(soln));
                    stop = System.nanoTime();
                    runtime = stop - startTime; //time in nanoseconds
                    cost = Pathfinding.cost(D, start, soln);
//                    costs_and_times.add(new ArrayList<Float>());
//                    costs_and_times.get(i).add((float)runtime / 1000000000.0f);
//                    costs_and_times.get(i).add(cost);
//                    i++;
                    update(String.format("nEL = %d. nCL = %d. \nSOLUTION COST = %.1f. \nRuntime = %fs.\n", nEL, nCL, cost, (double)runtime / 1000000000.0));
            // }
            String outputFile;
//            outputFile = "costsList.csv";
//            update(String.format("Sending results to %s... ", outputFile));
//            CSVParsing.matrixToCSV(costs_and_times, outputFile);

            outputFile = mapFileName.replace(".csv", "") + "_path.csv";
            update(String.format("Sending path to %s... ", outputFile));
            CSVParsing.listToFile(soln, outputFile);

            update(" done.\n");
        }
    }//GEN-LAST:event_createPathButtonActionPerformed

    private void clearMessagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearMessagesActionPerformed
        Messages.setText("");
    }//GEN-LAST:event_clearMessagesActionPerformed

    private void clearArduinoMessagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearArduinoMessagesActionPerformed
        ArduinoMessages.setText("");
    }//GEN-LAST:event_clearArduinoMessagesActionPerformed

    private void clearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAllActionPerformed
        PathField.setText("");
        path = new String("");
        waitingForResponse = false;
        Messages.setText("");
        ArduinoMessages.setText("");
    }//GEN-LAST:event_clearAllActionPerformed

    @Override
    public void update(String theMessage){
        Messages.append(theMessage + "\n");
        Messages.update(Messages.getGraphics());
        //Messages.update() forces the field to update so it doesn't continue 
        //processing stuff and dump all the text way later.
    }
    
    public void updateArduinoMessages(String theMessage){
        ArduinoMessages.append(theMessage + "\n");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea ArduinoMessages;
    private javax.swing.JButton Close;
    private javax.swing.JTextArea Messages;
    private javax.swing.JSpinner NodeNumberSpinner;
    private javax.swing.JButton Open;
    private javax.swing.JTextArea PathField;
    private javax.swing.JButton Start;
    private javax.swing.JButton Stop;
    private javax.swing.JButton clearAll;
    private javax.swing.JButton clearArduinoMessages;
    private javax.swing.JButton clearMessages;
    private javax.swing.JButton clearPath;
    private javax.swing.JButton createPathButton;
    private javax.swing.JTextField fileNameBox;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton leftIntersection;
    private javax.swing.JButton leftRoom;
    private javax.swing.JButton listPorts;
    private javax.swing.JButton nodeNumberButton;
    private javax.swing.JTextField numberBox;
    private javax.swing.JTextField portName;
    private javax.swing.JButton quit;
    private javax.swing.JButton rightIntersection;
    private javax.swing.JButton rightRoom;
    private javax.swing.JButton sendPath;
    private javax.swing.JButton setFileButton;
    private javax.swing.JButton setPortNameButton;
    private javax.swing.JButton setStopCodeButton;
    private javax.swing.JButton showPath;
    private javax.swing.JTextField stopCode;
    // End of variables declaration//GEN-END:variables
}
